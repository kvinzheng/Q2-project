swagger: "2.0"
info:
  version: "0.0.1"
  title: Travel-Package-Manager
# during dev, should point to your local machine
host: travel-package-project.herokuapp.com
# basePath prefixes all resource paths
basePath: 
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /flight:
    x-swagger-router-controller: flight
    get:
      description: Get an array of all added flights, enter the city where you depart from, api provides airline, airline cost, departure_city, departure_date, destination_city, and its ticket cost
      #define the type of response for Success "200" and Error
      produces:
        - application/json
      operationId: GetAllFlight
      parameters:
        - in: query
          name: departure_city
          description: departure_city
          required: true
          type: string
        - in: query
          name: departure_date
          description: enter the date in 'yyyy-mm-dd' format
          required: true
          type: string
        # - in: header
        #   name: token
        #   required: true
        #   type: string
        #   description: this is token

      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/GetFlightResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /flight/{id}:
    x-swagger-router-controller: flight
    get:
      description: Search for specific flight, its airline name, cost, departure city, departure date
      operationId: GetFlight
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of the flight that we want to look up
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetFlightResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /restaurant:
    x-swagger-router-controller: restaurant
    get:
      description: Using Yelp npm package to search for an array of first 40 restaurants with an inputs of the departure city and a yelp rating. Restaurants are sorted in the order of view count from largest to smallest
      operationId: GetAllRestaurant
      produces:
        - application/json
      parameters:
        - in: query
          name: departure_city
          description: the city that the restaurant locates at
          required: true
          type: string

        - in: query
          name: rating
          description: the ratinng that the users want it to be
          required: true
          type: string

      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/GetRestaurantResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /hotel:
    x-swagger-router-controller: hotel
    get:
      operationId: GetAllHotel
      description: get an array of hotel info
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
             $ref: "#/definitions/GetHotelResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /hotel/{id}:
    x-swagger-router-controller: hotel
    get:
      operationId: GetSpecificHotel
      description: get the relevant hotel info
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of the flight that we want to look up
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetHotelResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    x-swagger-router-controller: users
    get:
      description: get users info
      operationId: GetAllUsers
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/GetUsersResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    post:
      description: To register an new account, user needs to enter first_name, last_name, username, password and a unique token. The response object would includes an token for authentication purpose
      operationId: AddUser
      produces:
        - application/json
      parameters:
        - name: personName
          description: adding a user
          in: body
          required: true
          schema:
            $ref: "#/definitions/AddUser"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PostUsersResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  /users/{id}:
    x-swagger-router-controller: users
    get:
      description: return specific users
      operationId: GetSpecificUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the person to fetch
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/specificUser"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    patch:
      # define the parameters
      description: update a sepecific user with inputs of first_name, last_name, username, and password, the return response will include id, username, first_name, and last_name
      operationId: UpdateUser
      produces:
        - application/json
      parameters:
        - name: id
          description: update user by this id
          type: integer
          format: int64
          in: path
          required: true
        - in: body
          name: "jsonPatch"
          required: true
          schema:
            $ref: "#/definitions/updateUser"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUsersResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: deleting a specific user, it will return back a id, username, first_name, and last_name
      operationId: DeleteUser
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The id that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUsersResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users/{id}/packages:
    x-swagger-router-controller: packages
    get:
      description: Get a full package information of the specific user, the response object will have the following - package_id, user_id, airline, flight_id, flight_cost, restaurant_name, restaurant_id, restaurants_review, hotels_name, hotels_id, and hotels_cost
      operationId: GetAllPackagePerUser
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: the id that needs to get back
          required: true
          type: integer
        - in: header
          name: token
          description: an authorization header
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/GetAllPackages"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    post:
      description: To add a package for the specific user, user needs to enter budget, departure_airport_name, destination_airport_name, destination_airport_name, departure_date
      operationId: PostUniquePackagePerUser
      produces:
        - application/json
      parameters:
        - name: id
          type: integer
          in: path
          required: true
          description: adding an package info into the user_package table
        - name: package
          in: body
          description: adding an package to that user
          required: true
          schema:
            $ref: "#/definitions/AddNewPackage"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PackageDetail"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /login:
    x-swagger-router-controller: login
    post:
    #define paramaters
      description: User login
      operationId: userLogin
      produces:
        - application/json
      parameters:
       -  in: body
          name: "username and password"
          required: true
          schema:
            $ref: "#/definitions/signin"

      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/loggedIn"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  GetFlightResponse:
    required:
      - id
      - airline
      - cost
      - destination_city
      - departure_city
      - arrival_date
      - departure_date
    type: object
    properties:
      id:
        type: integer
      airline:
        type: string
      cost:
        type: integer
      destination_city:
        type: string
      departure_city:
        type: string
      arrival_date:
        type: string
      departure_date:
        type: string

  GetAllPackages:
      # The array of packages
    required:
      - package_id
      - user_id
      - airline
      - flight_id
      - flight_cost
      - restaurant_name
      - restaurant_id
      - hotels_name
      - hotels_id
      - hotels_cost
    properties:
      package_id:
        type: integer
      user_id:
        type: integer
      airline:
        type: string
      flight_id:
        type: integer
      flight_cost:
        type: integer
      restaurant_name:
        type: string
      restaurant_id:
        type: integer
      hotels_name:
        type: string
      hotels_id:
        type: integer
      hotels_cost:
        type: integer


  AddNewPackage:
    type: object
    required:
      - airfare
      - departure_airport_name
      - destination_airport_name
      - departure_date
      - hotel_name
      - city_name
    properties:
      airfare:
        description: enter the amount of allowed airfare, please enter an amount larger than your airfare; otherwise, it won't work. For instance, you can enter a big amount such 2000 dollars
        type: integer
      departure_airport_name:
        description: enter the airport name such as "SFO" or "JFK"
        type: string
      destination_airport_name:
        description: enter the airport name such as "SFO" or "JFK"
        type: string
      departure_date:
        description: enter the date in 'yyyy-mm-dd' format
        type: string
      hotel_name:
        description: enter the hotel name such as 'Hilton'
        type: string
      city_name:
        description: enter the city name such as 'San Francisco'
        type: string

  PackageDetail:
    type: object
    required:
      - user_id
      - package_id
      - airline
      - flight_id
      - flight_cost
      - restaurant_name
      - restaurant_id
      - hotels_name
      - hotels_id
      - hotels_cost
    properties:
      user_id:
        type: integer
      package_id:
        type: integer
      airline:
        type: string
      flight_id:
        type: integer
      flight_cost:
        type: integer
      restaurant_name:
        type: string
      restaurant_id:
        type: integer
      hotels_name:
        type: string
      hotels_id:
        type: integer
      hotels_cost:
        type: integer

  GetRestaurantResponse:
    required:
      - id
      - name
      - city_name
      - street_name
      - view_count
    properties:
      id:
        type: string
      name:
        type: string
      city_name:
        type: string
      street_name:
        type: string
      view_count:
        type: integer

  GetHotelResponse:
    required:
      - name
      - city_name
      - street_name
      - cost
    properties:
      name:
        type: string
      city_name:
        type: string
      street_name:
        type: string
      cost:
        type: integer

  GetUsersResponse:
    type: object
    required:
      - id
      - first_name
      - last_name
      - username
    properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string

  AddUser:
    type: object
    required:
      - first_name
      - last_name
      - username
      - password
    properties:
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      password:
        type: string

  updateUser:
    type: object
    required:
      - first_name
      - last_name
      - username
      - password
    properties:
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      password:
        type: string

  specificUser:
    type: object
    required:
      - id
      - first_name
      - last_name
      - username
    properties:
      id:
        type: integer
        format: int64
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string


  signin:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string

  loggedIn:
    required:
      - id
      - user_name
      - first_name
      - last_name
      - token
    properties:
      id:
        type: integer
      user_name:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      token:
        type: string

  PostUsersResponse:
    type: object
    required:
      - id
      - first_name
      - last_name
      - username
      - token

    properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      token:
        type: string

  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
